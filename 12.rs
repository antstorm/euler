// The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:
//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

fn solve(min_divisors: u32) -> u32 {
  let mut divisors:u32;
  let mut value = 0;
  let mut order = 0;
  let mut limit:u32;
  let mut i:u32;

  loop {
    divisors = 0;

    order += 1;
    value += order;

    i = 1;
    limit = value;

    while i < limit {
      if value % i == 0 {
        // Adding both divisor and result
        divisors += 2;
        // Since we've added the result, no other divisor can be bigger than the result
        limit = value / i;
      }

      i += 1;
    }

    if divisors > min_divisors { break; }
  }

  return value
}

fn main() {
  assert_eq!(solve(5), 28);

  println!("Result: {}", solve(500));
}
